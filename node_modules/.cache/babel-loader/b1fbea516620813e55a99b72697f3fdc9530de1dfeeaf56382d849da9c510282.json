{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useLazyRef } from \"./internal/index.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient(options.client).cache;\n  var diffOptions = useDeepMemo(function () {\n    var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n    return __assign(__assign({}, rest), {\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    });\n  }, [options]);\n  var resultRef = useLazyRef(function () {\n    return diffToResult(cache.diff(diffOptions));\n  });\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return resultRef.current;\n  }, []);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubscribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff.result, resultRef.current.data)) {\n          resultRef.current = diffToResult(diff);\n          // If we get another update before we've re-rendered, bail out of\n          // the update and try again. This ensures that the relative timing\n          // between useQuery and useFragment stays roughly the same as\n          // fixed in https://github.com/apollographql/apollo-client/pull/11083\n          clearTimeout(lastTimeout);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, diffOptions]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"names":["React","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useDeepMemo","useLazyRef","useFragment","options","cache","client","diffOptions","fragment","fragmentName","from","_a","optimistic","rest","__rest","__assign","returnPartialData","id","identify","query","resultRef","diffToResult","diff","getSnapshot","useCallback","current","forceUpdate","lastTimeout","unsubscribe","watch","immediate","callback","result","data","clearTimeout","setTimeout","complete","missing","map","error"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\n\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, useLazyRef } from \"./internal/index.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of {@link ApolloClient} to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient(options.client);\n\n  const diffOptions = useDeepMemo<Cache.DiffOptions<TData, TVars>>(() => {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...rest\n    } = options;\n\n    return {\n      ...rest,\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    };\n  }, [options]);\n\n  const resultRef = useLazyRef<UseFragmentResult<TData>>(() =>\n    diffToResult(cache.diff<TData>(diffOptions))\n  );\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => resultRef.current, []);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const unsubscribe = cache.watch({\n          ...diffOptions,\n          immediate: true,\n          callback(diff) {\n            if (!equal(diff.result, resultRef.current.data)) {\n              resultRef.current = diffToResult(diff);\n              // If we get another update before we've re-rendered, bail out of\n              // the update and try again. This ensures that the relative timing\n              // between useQuery and useFragment stays roughly the same as\n              // fixed in https://github.com/apollographql/apollo-client/pull/11083\n              clearTimeout(lastTimeout);\n              lastTimeout = setTimeout(forceUpdate) as any;\n            }\n          },\n        });\n        return () => {\n          unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, diffOptions]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SAASC,KAAK,QAAQ,eAAe;AAGrC,SAASC,cAAc,QAAQ,0BAA0B;AAQzD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,oBAAoB,QAAQ,2BAA2B;AAGhE,SAASC,WAAW,EAAEC,UAAU,QAAQ,qBAAqB;AAqC7D,OAAM,SAAUC,WAAWA,CACzBC,OAAyC;EAEjC,IAAAC,KAAK,GAAKN,eAAe,CAACK,OAAO,CAACE,MAAM,CAAC,CAAAD,KAApC;EAEb,IAAME,WAAW,GAAGN,WAAW,CAAkC;IAE7D,IAAAO,QAAQ,GAKNJ,OAAO,CAAAI,QALD;MACRC,YAAY,GAIVL,OAAO,CAAAK,YAJG;MACZC,IAAI,GAGFN,OAAO,CAAAM,IAHL;MACJC,EAAA,GAEEP,OAAO,CAAAQ,UAFQ;MAAjBA,UAAU,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;MACdE,IAAI,GAAAC,MAAA,CACLV,OAAO,EANL,kDAML,CADQ;IAGT,OAAAW,QAAA,CAAAA,QAAA,KACKF,IAAI;MACPG,iBAAiB,EAAE,IAAI;MACvBC,EAAE,EAAE,OAAOP,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGL,KAAK,CAACa,QAAQ,CAACR,IAAI,CAAC;MAC1DS,KAAK,EAAEd,KAAK,CAAC,gBAAgB,CAAC,CAACG,QAAQ,EAAEC,YAAY,CAAC;MACtDG,UAAU,EAAAA;IAAA;EAEd,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,IAAMgB,SAAS,GAAGlB,UAAU,CAA2B;IACrD,OAAAmB,YAAY,CAAChB,KAAK,CAACiB,IAAI,CAAQf,WAAW,CAAC,CAAC;EAA5C,CAA4C,CAC7C;EAED;EACA,IAAMgB,WAAW,GAAG3B,KAAK,CAAC4B,WAAW,CAAC;IAAM,OAAAJ,SAAS,CAACK,OAAO;EAAjB,CAAiB,EAAE,EAAE,CAAC;EAElE,OAAOzB,oBAAoB,CACzBJ,KAAK,CAAC4B,WAAW,CACf,UAACE,WAAW;IACV,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAMC,WAAW,GAAGvB,KAAK,CAACwB,KAAK,CAAAd,QAAA,CAAAA,QAAA,KAC1BR,WAAW;MACduB,SAAS,EAAE,IAAI;MACfC,QAAQ,WAAAA,CAACT,IAAI;QACX,IAAI,CAACzB,KAAK,CAACyB,IAAI,CAACU,MAAM,EAAEZ,SAAS,CAACK,OAAO,CAACQ,IAAI,CAAC,EAAE;UAC/Cb,SAAS,CAACK,OAAO,GAAGJ,YAAY,CAACC,IAAI,CAAC;UACtC;UACA;UACA;UACA;UACAY,YAAY,CAACP,WAAW,CAAC;UACzBA,WAAW,GAAGQ,UAAU,CAACT,WAAW,CAAQ;QAC9C;MACF;IAAC,GACD;IACF,OAAO;MACLE,WAAW,EAAE;MACbM,YAAY,CAACP,WAAW,CAAC;IAC3B,CAAC;EACH,CAAC,EACD,CAACtB,KAAK,EAAEE,WAAW,CAAC,CACrB,EACDgB,WAAW,EACXA,WAAW,CACZ;AACH;AAEA,SAASF,YAAYA,CACnBC,IAA6B;EAE7B,IAAMU,MAAM,GAAG;IACbC,IAAI,EAAEX,IAAI,CAACU,MAAO;IAClBI,QAAQ,EAAE,CAAC,CAACd,IAAI,CAACc;GACU;EAE7B,IAAId,IAAI,CAACe,OAAO,EAAE;IAChBL,MAAM,CAACK,OAAO,GAAGvC,cAAc,CAACwB,IAAI,CAACe,OAAO,CAACC,GAAG,CAAC,UAACC,KAAK;MAAK,OAAAA,KAAK,CAACF,OAAO;IAAb,CAAa,CAAC,CAAC;EAC7E;EAEA,OAAOL,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}