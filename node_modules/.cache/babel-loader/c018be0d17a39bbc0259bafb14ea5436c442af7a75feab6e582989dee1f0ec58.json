{"ast":null,"code":"import { Observable } from \"./Observable.js\";\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n    function makeCallback(examiner, key) {\n      return function (arg) {\n        if (examiner) {\n          var both = function () {\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            return observer.closed ? /* will be swallowed */0 : examiner(arg);\n          };\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            return observer.next(result);\n          }, function (error) {\n            return observer.error(error);\n          });\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n    var handler = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete: function () {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */\n        promiseQueue.then(function () {\n          return observer.complete();\n        });\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"names":["Observable","asyncMap","observable","mapFn","catchFn","observer","promiseQueue","then","callback","Promise","resolve","makeCallback","examiner","key","arg","both","closed","result","next","error","handler","complete","sub","subscribe","unsubscribe"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/utilities/observables/asyncMap.ts"],"sourcesContent":["import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      key: \"next\" | \"error\"\n    ): (arg: any) => void {\n      return (arg) => {\n        if (examiner) {\n          const both = () =>\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            observer.closed ?\n              /* will be swallowed */ (0 as any)\n            : examiner(arg);\n\n          promiseQueue = promiseQueue.then(both, both).then(\n            (result) => observer.next(result),\n            (error) => observer.error(error)\n          );\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete() {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */ promiseQueue.then(() => observer.complete());\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,iBAAiB;AAE5C;AACA;AACA,OAAM,SAAUC,QAAQA,CACtBC,UAAyB,EACzBC,KAAuC,EACvCC,OAA4C;EAE5C,OAAO,IAAIJ,UAAU,CAAI,UAACK,QAAQ;IAChC,IAAIC,YAAY,GAAG;MACjB;MACA;MACA;MACAC,IAAI,WAAAA,CAACC,QAAmB;QACtB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;UAAK,OAAAA,OAAO,CAACF,QAAQ,EAAE,CAAC;QAAnB,CAAmB,CAAC;MACtD;KACgB;IAElB,SAASG,YAAYA,CACnBC,QAAuC,EACvCC,GAAqB;MAErB,OAAO,UAACC,GAAG;QACT,IAAIF,QAAQ,EAAE;UACZ,IAAMG,IAAI,GAAG,SAAAA,CAAA;YACX;YACA;YACA,OAAAV,QAAQ,CAACW,MAAM,GACb,uBAAyB,CAAS,GAClCJ,QAAQ,CAACE,GAAG,CAAC;UAFf,CAEe;UAEjBR,YAAY,GAAGA,YAAY,CAACC,IAAI,CAACQ,IAAI,EAAEA,IAAI,CAAC,CAACR,IAAI,CAC/C,UAACU,MAAM;YAAK,OAAAZ,QAAQ,CAACa,IAAI,CAACD,MAAM,CAAC;UAArB,CAAqB,EACjC,UAACE,KAAK;YAAK,OAAAd,QAAQ,CAACc,KAAK,CAACA,KAAK,CAAC;UAArB,CAAqB,CACjC;QACH,CAAC,MAAM;UACLd,QAAQ,CAACQ,GAAG,CAAC,CAACC,GAAG,CAAC;QACpB;MACF,CAAC;IACH;IAEA,IAAMM,OAAO,GAAgB;MAC3BF,IAAI,EAAEP,YAAY,CAACR,KAAK,EAAE,MAAM,CAAC;MACjCgB,KAAK,EAAER,YAAY,CAACP,OAAO,EAAE,OAAO,CAAC;MACrCiB,QAAQ,WAAAA,CAAA;QACN;QACA;QACA;QAAoBf,YAAY,CAACC,IAAI,CAAC;UAAM,OAAAF,QAAQ,CAACgB,QAAQ,EAAE;QAAnB,CAAmB,CAAC;MAClE;KACD;IAED,IAAMC,GAAG,GAAGpB,UAAU,CAACqB,SAAS,CAACH,OAAO,CAAC;IACzC,OAAO;MAAM,OAAAE,GAAG,CAACE,WAAW,EAAE;IAAjB,CAAiB;EAChC,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}