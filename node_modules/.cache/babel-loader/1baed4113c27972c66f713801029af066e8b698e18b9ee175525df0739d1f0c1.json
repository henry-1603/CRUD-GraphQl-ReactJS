{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document) {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(cacheSizes.parser || 1000 /* defaultCacheSizes.parser */);\n  }\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 59, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 62, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nparser.resetCache = function () {\n  cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n  registerGlobalCache(\"parser\", function () {\n    return cache ? cache.size : 0;\n  });\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"names":["invariant","AutoCleanedWeakCache","cacheSizes","registerGlobalCache","DocumentType","cache","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","kind","fragments","queries","mutations","subscriptions","_i","_a","definitions","length","x","push","operation","definition","variableDefinitions","value","payload","set","resetCache","undefined","globalThis","__DEV__","size","verifyDocumentType","requiredOperationName","usedOperationName"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}