{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { StrongCache } from \"@wry/caches\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen, Slot } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n  const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n  return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\n;\nconst caches = new Set();\nexport function wrap(originalFunction, {\n  max = Math.pow(2, 16),\n  keyArgs,\n  makeCacheKey = defaultMakeCacheKey,\n  normalizeResult,\n  subscribe,\n  cache: cacheOption = StrongCache\n} = Object.create(null)) {\n  const cache = typeof cacheOption === \"function\" ? new cacheOption(max, entry => entry.dispose()) : cacheOption;\n  const optimistic = function () {\n    const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    let entry = cache.get(key);\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.normalizeResult = normalizeResult;\n      entry.subscribe = subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n    const value = entry.recompute(Array.prototype.slice.call(arguments));\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n    return value;\n  };\n  Object.defineProperty(optimistic, \"size\", {\n    get: () => cache.size,\n    configurable: false,\n    enumerable: false\n  });\n  Object.freeze(optimistic.options = {\n    max,\n    keyArgs,\n    makeCacheKey,\n    normalizeResult,\n    subscribe,\n    cache\n  });\n  function dirtyKey(key) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n  function peekKey(key) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n  function forgetKey(key) {\n    return key ? cache.delete(key) : false;\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}","map":{"version":3,"names":["Trie","StrongCache","Entry","parentEntrySlot","bindContext","noContext","nonReactive","setTimeout","asyncFromGen","Slot","dep","defaultKeyTrie","defaultMakeCacheKey","args","trie","WeakMap","lookupArray","KeyTrie","caches","Set","wrap","originalFunction","max","Math","pow","keyArgs","makeCacheKey","normalizeResult","subscribe","cache","cacheOption","Object","create","entry","dispose","optimistic","key","apply","arguments","get","set","forget","delete","value","recompute","Array","prototype","slice","call","add","hasValue","forEach","clean","clear","defineProperty","size","configurable","enumerable","freeze","options","dirtyKey","setDirty","dirty","peekKey","peek","forgetKey","getKey"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/optimism/src/index.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\n\nimport { StrongCache, CommonCache } from \"@wry/caches\";\nimport { Entry, AnyEntry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\nimport type { NoInfer } from \"./helpers.js\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  nonReactive,\n  setTimeout,\n  asyncFromGen,\n  Slot,\n} from \"./context.js\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep.js\";\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie: Trie<object> | undefined;\nexport function defaultMakeCacheKey(...args: any[]): object {\n  const trie = defaultKeyTrie || (\n    defaultKeyTrie = new Trie(typeof WeakMap === \"function\")\n  );\n  return trie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // Snapshot of wrap options used to create this wrapper function.\n  options: OptionsWithCacheInstance<TArgs, TKeyArgs, TCacheKey>;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey | undefined) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey | undefined) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey | undefined) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey | undefined;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey. This function is also exposed as\n  // optimistic.options.makeCacheKey, somewhat redundantly.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey | undefined;\n};\n\nexport { CommonCache }\nexport interface CommonCacheConstructor<TCacheKey, TResult, TArgs extends any[]> extends Function {\n  new <K extends TCacheKey, V extends Entry<TArgs, TResult>>(max?: number, dispose?: (value: V, key?: K) => void): CommonCache<K,V>;\n}\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n  TResult = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: NoInfer<TKeyArgs>) => TCacheKey | undefined;\n  // Called when a new value is computed to allow efficient normalization of\n  // results over time, for example by returning older if equal(newer, older).\n  normalizeResult?: (newer: TResult, older: TResult) => TResult;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n  cache?: CommonCache<NoInfer<TCacheKey>, Entry<NoInfer<TArgs>, NoInfer<TResult>>>\n    | CommonCacheConstructor<NoInfer<TCacheKey>, NoInfer<TResult>, NoInfer<TArgs>>;\n};\n\nexport interface OptionsWithCacheInstance<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n  TResult = any,\n> extends OptimisticWrapOptions<TArgs, TKeyArgs, TCacheKey, TResult> {\n  cache: CommonCache<NoInfer<TCacheKey>, Entry<NoInfer<TArgs>, NoInfer<TResult>>>;\n};\n\nconst caches = new Set<CommonCache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(originalFunction: (...args: TArgs) => TResult, {\n  max = Math.pow(2, 16),\n  keyArgs,\n  makeCacheKey = (defaultMakeCacheKey as () => TCacheKey),\n  normalizeResult,\n  subscribe,\n  cache: cacheOption = StrongCache,\n}: OptimisticWrapOptions<TArgs, TKeyArgs, TCacheKey, TResult> = Object.create(null)) {\n  const cache: CommonCache<TCacheKey, Entry<TArgs, TResult>> =\n    typeof cacheOption === \"function\"\n      ? new cacheOption(max, entry => entry.dispose())\n      : cacheOption;\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.normalizeResult = normalizeResult;\n      entry.subscribe = subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get: () => cache.size,\n    configurable: false,\n    enumerable: false,\n  });\n\n  Object.freeze(optimistic.options = {\n    max,\n    keyArgs,\n    makeCacheKey,\n    normalizeResult,\n    subscribe,\n    cache,\n  });\n\n  function dirtyKey(key: TCacheKey | undefined) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey | undefined) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey | undefined) {\n    return key ? cache.delete(key) : false;\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey | undefined;\n\n  return Object.freeze(optimistic);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}