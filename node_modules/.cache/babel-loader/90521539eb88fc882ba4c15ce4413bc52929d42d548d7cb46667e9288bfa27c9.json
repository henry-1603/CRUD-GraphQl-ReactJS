{"ast":null,"code":"import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    var ret;\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      ret = new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      ret = new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n    return Object.assign(ret, {\n      left: leftLink,\n      right: rightLink\n    });\n  };\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n      return firstLink;\n    }\n    var nextLink = toLink(second);\n    var ret;\n    if (isTerminating(nextLink)) {\n      ret = new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      ret = new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n    return Object.assign(ret, {\n      left: firstLink,\n      right: nextLink\n    });\n  };\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw newInvariantError(36);\n  };\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  };\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n  return ApolloLink;\n}();\nexport { ApolloLink };","map":{"version":3,"names":["newInvariantError","invariant","Observable","validateOperation","createOperation","transformOperation","passthrough","op","forward","of","toLink","handler","ApolloLink","isTerminating","link","request","length","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","ret","operation","Object","assign","execute","context","first","second","firstLink","globalThis","__DEV__","warn","nextLink","prototype","next","onError","error","observer","setOnError","fn"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/link/core/ApolloLink.ts"],"sourcesContent":["import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\n\nimport type { Observer } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest,\n} from \"./types.js\";\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from \"../utils/index.js\";\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    let ret: ApolloLink;\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      ret = new ApolloLink((operation) => {\n        return test(operation) ?\n            leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      ret = new ApolloLink((operation, forward) => {\n        return test(operation) ?\n            leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n    return Object.assign(ret, { left: leftLink, right: rightLink });\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation))\n        )\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        `You are calling concat on a terminating link, which will have no effect %o`,\n        firstLink\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    let ret: ApolloLink;\n    if (isTerminating(nextLink)) {\n      ret = new ApolloLink(\n        (operation) =>\n          firstLink.request(\n            operation,\n            (op) => nextLink.request(op) || Observable.of()\n          ) || Observable.of()\n      );\n    } else {\n      ret = new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, (op) => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n    return Object.assign(ret, { left: firstLink, right: nextLink });\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink\n  ): Observable<FetchResult> | null {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly left?: ApolloLink;\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly right?: ApolloLink;\n\n  /**\n   * @internal\n   * Can be provided by a link that has an internal cache to report it's memory details.\n   */\n  getMemoryInternals?: () => unknown;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}