{"ast":null,"code":"export const {\n  hasOwnProperty\n} = Object.prototype;\nexport const arrayFromSet = Array.from || function (set) {\n  const array = [];\n  set.forEach(item => array.push(item));\n  return array;\n};\nexport function maybeUnsubscribe(entryOrDep) {\n  const {\n    unsubscribe\n  } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}","map":{"version":3,"names":["hasOwnProperty","Object","prototype","arrayFromSet","Array","from","set","array","forEach","item","push","maybeUnsubscribe","entryOrDep","unsubscribe"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/optimism/src/helpers.ts"],"sourcesContent":["export type NoInfer<T> = [T][T extends any ? 0 : never];\n\nexport const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const arrayFromSet: <T>(set: Set<T>) => T[] =\n  Array.from ||\n  function (set) {\n    const array: any[] = [];\n    set.forEach(item => array.push(item));\n    return array;\n  };\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n"],"mappings":"AAEA,OAAO,MAAM;EACXA;AAAc,CACf,GAAGC,MAAM,CAACC,SAAS;AAEpB,OAAO,MAAMC,YAAY,GACvBC,KAAK,CAACC,IAAI,IACV,UAAUC,GAAG;EACX,MAAMC,KAAK,GAAU,EAAE;EACvBD,GAAG,CAACE,OAAO,CAACC,IAAI,IAAIF,KAAK,CAACG,IAAI,CAACD,IAAI,CAAC,CAAC;EACrC,OAAOF,KAAK;AACd,CAAC;AAMH,OAAM,SAAUI,gBAAgBA,CAACC,UAA0B;EACzD,MAAM;IAAEC;EAAW,CAAE,GAAGD,UAAU;EAClC,IAAI,OAAOC,WAAW,KAAK,UAAU,EAAE;IACrCD,UAAU,CAACC,WAAW,GAAG,KAAK,CAAC;IAC/BA,WAAW,EAAE;;AAEjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}