{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n// Useful for processing arguments objects as well as arrays.\nconst {\n  forEach,\n  slice\n} = Array.prototype;\nconst {\n  hasOwnProperty\n} = Object.prototype;\nexport class Trie {\n  constructor(weakness = true, makeData = defaultMakeData) {\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  lookup(...array) {\n    return this.lookupArray(array);\n  }\n  lookupArray(array) {\n    let node = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\") ? node.data : node.data = this.makeData(slice.call(array));\n  }\n  peek(...array) {\n    return this.peekArray(array);\n  }\n  peekArray(array) {\n    let node = this;\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n      node = map && map.get(array[i]);\n    }\n    return node && node.data;\n  }\n  getChildTrie(key) {\n    const map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  }\n}\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}","map":{"version":3,"names":["defaultMakeData","Object","create","forEach","slice","Array","prototype","hasOwnProperty","Trie","constructor","weakness","makeData","lookup","array","lookupArray","node","call","key","getChildTrie","data","peek","peekArray","i","len","length","map","isObjRef","weak","strong","get","WeakMap","Map","child","set","value"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/optimism/node_modules/@wry/trie/src/index.ts"],"sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\")\n      ? node.data as Data\n      : node.data = this.makeData(slice.call(array));\n  }\n\n  public peek<T extends any[]>(...array: T): Data | undefined {\n    return this.peekArray(array);\n  }\n\n  public peekArray<T extends IArguments | any[]>(array: T): Data | undefined {\n    let node: Trie<Data> | undefined = this;\n\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map: Trie<Data>[\"weak\" | \"strong\"] =\n        this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n\n      node = map && map.get(array[i]);\n    }\n\n    return node && node.data;\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,MAAMA,eAAe,GAAGA,CAAA,KAAMC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAEjD;AACA,MAAM;EAAEC,OAAO;EAAEC;AAAK,CAAE,GAAGC,KAAK,CAACC,SAAS;AAC1C,MAAM;EAAEC;AAAc,CAAE,GAAGN,MAAM,CAACK,SAAS;AAE3C,OAAM,MAAOE,IAAI;EAQfC,YACUC,QAAA,GAAW,IAAI,EACfC,QAAA,GAAmCX,eAAe;IADlD,KAAAU,QAAQ,GAARA,QAAQ;IACR,KAAAC,QAAQ,GAARA,QAAQ;EACf;EAEIC,MAAMA,CAAkB,GAAGC,KAAQ;IACxC,OAAO,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;EAChC;EAEOC,WAAWA,CAA+BD,KAAQ;IACvD,IAAIE,IAAI,GAAe,IAAI;IAC3BZ,OAAO,CAACa,IAAI,CAACH,KAAK,EAAEI,GAAG,IAAIF,IAAI,GAAGA,IAAI,CAACG,YAAY,CAACD,GAAG,CAAC,CAAC;IACzD,OAAOV,cAAc,CAACS,IAAI,CAACD,IAAI,EAAE,MAAM,CAAC,GACpCA,IAAI,CAACI,IAAY,GACjBJ,IAAI,CAACI,IAAI,GAAG,IAAI,CAACR,QAAQ,CAACP,KAAK,CAACY,IAAI,CAACH,KAAK,CAAC,CAAC;EAClD;EAEOO,IAAIA,CAAkB,GAAGP,KAAQ;IACtC,OAAO,IAAI,CAACQ,SAAS,CAACR,KAAK,CAAC;EAC9B;EAEOQ,SAASA,CAA+BR,KAAQ;IACrD,IAAIE,IAAI,GAA2B,IAAI;IAEvC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGV,KAAK,CAACW,MAAM,EAAET,IAAI,IAAIO,CAAC,GAAGC,GAAG,EAAE,EAAED,CAAC,EAAE;MACxD,MAAMG,GAAG,GACP,IAAI,CAACf,QAAQ,IAAIgB,QAAQ,CAACb,KAAK,CAACS,CAAC,CAAC,CAAC,GAAGP,IAAI,CAACY,IAAI,GAAGZ,IAAI,CAACa,MAAM;MAE/Db,IAAI,GAAGU,GAAG,IAAIA,GAAG,CAACI,GAAG,CAAChB,KAAK,CAACS,CAAC,CAAC,CAAC;;IAGjC,OAAOP,IAAI,IAAIA,IAAI,CAACI,IAAI;EAC1B;EAEQD,YAAYA,CAACD,GAAQ;IAC3B,MAAMQ,GAAG,GAAG,IAAI,CAACf,QAAQ,IAAIgB,QAAQ,CAACT,GAAG,CAAC,GACtC,IAAI,CAACU,IAAI,KAAK,IAAI,CAACA,IAAI,GAAG,IAAIG,OAAO,EAAmB,CAAC,GACzD,IAAI,CAACF,MAAM,KAAK,IAAI,CAACA,MAAM,GAAG,IAAIG,GAAG,EAAmB,CAAC;IAC7D,IAAIC,KAAK,GAAGP,GAAG,CAACI,GAAG,CAACZ,GAAG,CAAC;IACxB,IAAI,CAACe,KAAK,EAAEP,GAAG,CAACQ,GAAG,CAAChB,GAAG,EAAEe,KAAK,GAAG,IAAIxB,IAAI,CAAO,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC9E,OAAOqB,KAAK;EACd;;AAGF,SAASN,QAAQA,CAACQ,KAAU;EAC1B,QAAQ,OAAOA,KAAK;IACpB,KAAK,QAAQ;MACX,IAAIA,KAAK,KAAK,IAAI,EAAE;IACpB;IACF,KAAK,UAAU;MACb,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}