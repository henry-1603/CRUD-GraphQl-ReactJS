{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, nextValue) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function () {\n    var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n    var _c, _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          if (TextDecoder === undefined) {\n            throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n          }\n          decoder = new TextDecoder(\"utf-8\");\n          contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n          delimiter = \"boundary=\";\n          boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n          boundary = \"\\r\\n--\".concat(boundaryVal);\n          buffer = \"\";\n          iterator = responseIterator(response);\n          running = true;\n          _e.label = 1;\n        case 1:\n          if (!running) return [3 /*break*/, 3];\n          return [4 /*yield*/, iterator.next()];\n        case 2:\n          _b = _e.sent(), value = _b.value, done = _b.done;\n          chunk = typeof value === \"string\" ? value : decoder.decode(value);\n          searchFrom = buffer.length - boundary.length + 1;\n          running = !done;\n          buffer += chunk;\n          bi = buffer.indexOf(boundary, searchFrom);\n          while (bi > -1) {\n            message = void 0;\n            _c = [buffer.slice(0, bi), buffer.slice(bi + boundary.length)], message = _c[0], buffer = _c[1];\n            i = message.indexOf(\"\\r\\n\\r\\n\");\n            headers = parseHeaders(message.slice(0, i));\n            contentType_1 = headers[\"content-type\"];\n            if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n              throw new Error(\"Unsupported patch content type: application/json is required.\");\n            }\n            body = message.slice(i);\n            if (body) {\n              result = parseJsonBody(response, body);\n              if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                if (isApolloPayloadResult(result)) {\n                  next = {};\n                  if (\"payload\" in result) {\n                    next = __assign({}, result.payload);\n                  }\n                  if (\"errors\" in result) {\n                    next = __assign(__assign({}, next), {\n                      extensions: __assign(__assign({}, \"extensions\" in next ? next.extensions : null), (_d = {}, _d[PROTOCOL_ERRORS_SYMBOL] = result.errors, _d))\n                    });\n                  }\n                  nextValue(next);\n                } else {\n                  // for the last chunk with only `hasNext: false`\n                  // we don't need to call observer.next as there is no data/errors\n                  nextValue(result);\n                }\n              } else if (\n              // If the chunk contains only a \"hasNext: false\", we can call\n              // observer.complete() immediately.\n              Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                return [2 /*return*/];\n              }\n            }\n            bi = buffer.indexOf(boundary);\n          }\n          return [3 /*break*/, 1];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nexport function parseHeaders(headerText) {\n  var headersInit = {};\n  headerText.split(\"\\n\").forEach(function (line) {\n    var i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      var name_1 = line.slice(0, i).trim().toLowerCase();\n      var value = line.slice(i + 1).trim();\n      headersInit[name_1] = value;\n    }\n  });\n  return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n  if (response.status >= 300) {\n    // Network error\n    var getResult = function () {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n  }\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    var parseError = err;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\nexport function handleError(err, observer) {\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next(err.result);\n  }\n  observer.error(err);\n}\nexport function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      return parseJsonBody(response, bodyText);\n    }).then(function (result) {\n      if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n        // Data error\n        throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName, \"'.\"));\n      }\n      return result;\n    });\n  };\n}","map":{"version":3,"names":["responseIterator","throwServerError","PROTOCOL_ERRORS_SYMBOL","isApolloPayloadResult","hasOwnProperty","Object","prototype","readMultipartBody","response","nextValue","TextDecoder","undefined","Error","decoder","contentType","_a","headers","get","delimiter","boundaryVal","includes","substring","indexOf","length","replace","trim","boundary","concat","buffer","iterator","running","next","_b","_e","sent","value","done","chunk","decode","searchFrom","bi","message","_c","slice","i","parseHeaders","contentType_1","toLowerCase","body","result","parseJsonBody","keys","__assign","payload","extensions","_d","errors","hasNext","headerText","headersInit","split","forEach","line","name_1","bodyText","status","getResult","JSON","parse","err","parseError","name","statusCode","handleError","observer","data","error","parseAndCheckHttpResponse","operations","text","then","Array","isArray","call","map","op","operationName"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts"],"sourcesContent":["import { responseIterator } from \"./responseIterator.js\";\nimport type { Operation } from \"../core/index.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nimport type { SubscriptionObserver } from \"zen-observable-ts\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport async function readMultipartBody<\n  T extends object = Record<string, unknown>,\n>(response: Response, nextValue: (value: T) => void) {\n  if (TextDecoder === undefined) {\n    throw new Error(\n      \"TextDecoder must be defined in the environment: please import a polyfill.\"\n    );\n  }\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get(\"content-type\");\n  const delimiter = \"boundary=\";\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const boundaryVal =\n    contentType?.includes(delimiter) ?\n      contentType\n        ?.substring(contentType?.indexOf(delimiter) + delimiter.length)\n        .replace(/['\"]/g, \"\")\n        .replace(/\\;(.*)/gm, \"\")\n        .trim()\n    : \"-\";\n\n  const boundary = `\\r\\n--${boundaryVal}`;\n  let buffer = \"\";\n  const iterator = responseIterator(response);\n  let running = true;\n\n  while (running) {\n    const { value, done } = await iterator.next();\n    const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n    const searchFrom = buffer.length - boundary.length + 1;\n    running = !done;\n    buffer += chunk;\n    let bi = buffer.indexOf(boundary, searchFrom);\n\n    while (bi > -1) {\n      let message: string;\n      [message, buffer] = [\n        buffer.slice(0, bi),\n        buffer.slice(bi + boundary.length),\n      ];\n      const i = message.indexOf(\"\\r\\n\\r\\n\");\n      const headers = parseHeaders(message.slice(0, i));\n      const contentType = headers[\"content-type\"];\n      if (\n        contentType &&\n        contentType.toLowerCase().indexOf(\"application/json\") === -1\n      ) {\n        throw new Error(\n          \"Unsupported patch content type: application/json is required.\"\n        );\n      }\n      // nb: Technically you'd want to slice off the beginning \"\\r\\n\" but since\n      // this is going to be `JSON.parse`d there is no need.\n      const body = message.slice(i);\n\n      if (body) {\n        const result = parseJsonBody<T>(response, body);\n        if (\n          Object.keys(result).length > 1 ||\n          \"data\" in result ||\n          \"incremental\" in result ||\n          \"errors\" in result ||\n          \"payload\" in result\n        ) {\n          if (isApolloPayloadResult(result)) {\n            let next = {};\n            if (\"payload\" in result) {\n              next = { ...result.payload };\n            }\n            if (\"errors\" in result) {\n              next = {\n                ...next,\n                extensions: {\n                  ...(\"extensions\" in next ? next.extensions : (null as any)),\n                  [PROTOCOL_ERRORS_SYMBOL]: result.errors,\n                },\n              };\n            }\n            nextValue(next as T);\n          } else {\n            // for the last chunk with only `hasNext: false`\n            // we don't need to call observer.next as there is no data/errors\n            nextValue(result);\n          }\n        } else if (\n          // If the chunk contains only a \"hasNext: false\", we can call\n          // observer.complete() immediately.\n          Object.keys(result).length === 1 &&\n          \"hasNext\" in result &&\n          !result.hasNext\n        ) {\n          return;\n        }\n      }\n      bi = buffer.indexOf(boundary);\n    }\n  }\n}\n\nexport function parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nexport function parseJsonBody<T>(response: Response, bodyText: string): T {\n  if (response.status >= 300) {\n    // Network error\n    const getResult = (): Record<string, unknown> | string => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(\n      response,\n      getResult(),\n      `Response not successful: Received status code ${response.status}`\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText) as T;\n  } catch (err) {\n    const parseError = err as ServerParseError;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\n\nexport function handleError(err: any, observer: SubscriptionObserver<any>) {\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next(err.result);\n  }\n\n  observer.error(err);\n}\n\nexport function parseAndCheckHttpResponse(operations: Operation | Operation[]) {\n  return (response: Response) =>\n    response\n      .text()\n      .then((bodyText) => parseJsonBody(response, bodyText))\n      .then((result: any) => {\n        if (\n          !Array.isArray(result) &&\n          !hasOwnProperty.call(result, \"data\") &&\n          !hasOwnProperty.call(result, \"errors\")\n        ) {\n          // Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations) ?\n                operations.map((op) => op.operationName)\n              : operations.operationName\n            }'.`\n          );\n        }\n        return result;\n      });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}