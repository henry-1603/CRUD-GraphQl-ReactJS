{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nvar SuspenseCache = /** @class */function () {\n  function SuspenseCache(options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.queryRefs = new Trie(canUseWeakMap);\n    this.options = options;\n  }\n  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  };\n  return SuspenseCache;\n}();\nexport { SuspenseCache };","map":{"version":3,"names":["Trie","canUseWeakMap","InternalQueryReference","SuspenseCache","options","Object","create","queryRefs","prototype","getQueryRef","cacheKey","createObservable","ref","lookupArray","current","autoDisposeTimeoutMs","onDispose"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/internal/cache/SuspenseCache.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\nimport type { ObservableQuery } from \"../../../core/index.js\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey } from \"./types.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAEhC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,sBAAsB,QAAQ,qBAAqB;AAiB5D,IAAAC,aAAA;EAME,SAAAA,cAAYC,OAAmD;IAAnD,IAAAA,OAAA;MAAAA,OAAA,GAAgCC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAA;IALvD,KAAAC,SAAS,GAAG,IAAIP,IAAI,CAC1BC,aAAa,CACd;IAIC,IAAI,CAACG,OAAO,GAAGA,OAAO;EACxB;EAEAD,aAAA,CAAAK,SAAA,CAAAC,WAAW,GAAX,UACEC,QAAkB,EAClBC,gBAA8C;IAE9C,IAAMC,GAAG,GAAG,IAAI,CAACL,SAAS,CAACM,WAAW,CAACH,QAAQ,CAE9C;IAED,IAAI,CAACE,GAAG,CAACE,OAAO,EAAE;MAChBF,GAAG,CAACE,OAAO,GAAG,IAAIZ,sBAAsB,CAACS,gBAAgB,EAAE,EAAE;QAC3DI,oBAAoB,EAAE,IAAI,CAACX,OAAO,CAACW,oBAAoB;QACvDC,SAAS,EAAE,SAAAA,CAAA;UACT,OAAOJ,GAAG,CAACE,OAAO;QACpB;OACD,CAAC;IACJ;IAEA,OAAOF,GAAG,CAACE,OAAO;EACpB,CAAC;EACH,OAAAX,aAAC;AAAD,CAAC,CA7BD"},"metadata":{},"sourceType":"module","externalDependencies":[]}