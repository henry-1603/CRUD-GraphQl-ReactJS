{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath,\n      // Using context.readField to extract paths from context.storeObject\n      // allows the extraction to see through Reference objects and respect\n      // custom read functions.\n      extract);\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        // If context.storeObject fails to provide a value for the requested\n        // path, fall back to the raw result object, if it has a top-level key\n        // matching the first key in the path (schemaKeyPath[0]). This allows\n        // key fields included in the written data to be saved in the cache\n        // even if they are not selected explicitly in context.selectionSet.\n        // Not being mentioned by context.selectionSet is convenient here,\n        // since it means these extra fields cannot be affected by field\n        // aliasing, which is why we can use extractKey instead of\n        // context.readField for this extraction.\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n      invariant(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n      variables = _a.variables,\n      fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(directiveArgs,\n          // If keyPath.length === 1, this code calls extractKeyPath with an\n          // empty path, which works because it uses directiveArgs as the\n          // extracted value.\n          keyPath.slice(1));\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n    var toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n  return info.paths;\n}\nfunction extractKey(object, key) {\n  return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\nfunction normalize(value) {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n  return value;\n}","map":{"version":3,"names":["invariant","argumentsObjectFromField","DeepMerger","isNonEmptyArray","isNonNullObject","hasOwn","isArray","specifierInfoCache","Object","create","lookupSpecifierInfo","spec","cacheKey","JSON","stringify","keyFieldsFnFromSpecifier","specifier","info","keyFieldsFn","object","context","extract","from","key","readField","keyObject","collectSpecifierPaths","schemaKeyPath","extracted","extractKeyPath","storeObject","call","extractKey","join","concat","typename","keyArgsFnFromSpecifier","keyArgsFn","args","_a","field","variables","fieldName","collected","keyPath","firstKey","firstChar","charAt","directives","directiveName_1","slice","d","find","name","value","directiveArgs","variableName","varKeyPath","suffix","extractor","merger","getSpecifierPaths","reduce","path","toMerge","i","length","merge","paths","paths_1","currentPath_1","forEach","s","p","push","normalize","reducer","obj","map","child","keys","sort"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/cache/inmemory/key-extractor.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\n\nimport { hasOwn, isArray } from \"./helpers.js\";\nimport type {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies.js\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<\n  string,\n  {\n    paths?: string[][];\n    keyFieldsFn?: KeyFieldsFunction;\n    keyArgsFn?: KeyArgsFunction;\n  }\n> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return (\n    specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null))\n  );\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyFieldsFn ||\n    (info.keyFieldsFn = (object, context) => {\n      const extract: typeof extractKey = (from, key) =>\n        context.readField(key, from);\n\n      const keyObject = (context.keyObject = collectSpecifierPaths(\n        specifier,\n        (schemaKeyPath) => {\n          let extracted = extractKeyPath(\n            context.storeObject,\n            schemaKeyPath,\n            // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract\n          );\n\n          if (\n            extracted === void 0 &&\n            object !== context.storeObject &&\n            hasOwn.call(object, schemaKeyPath[0])\n          ) {\n            // If context.storeObject fails to provide a value for the requested\n            // path, fall back to the raw result object, if it has a top-level key\n            // matching the first key in the path (schemaKeyPath[0]). This allows\n            // key fields included in the written data to be saved in the cache\n            // even if they are not selected explicitly in context.selectionSet.\n            // Not being mentioned by context.selectionSet is convenient here,\n            // since it means these extra fields cannot be affected by field\n            // aliasing, which is why we can use extractKey instead of\n            // context.readField for this extraction.\n            extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n          }\n\n          invariant(\n            extracted !== void 0,\n            `Missing field '%s' while extracting keyFields from %s`,\n            schemaKeyPath.join(\".\"),\n            object\n          );\n\n          return extracted;\n        }\n      ));\n\n      return `${context.typename}:${JSON.stringify(keyObject)}`;\n    })\n  );\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyArgsFn ||\n    (info.keyArgsFn = (args, { field, variables, fieldName }) => {\n      const collected = collectSpecifierPaths(specifier, (keyPath) => {\n        const firstKey = keyPath[0];\n        const firstChar = firstKey.charAt(0);\n\n        if (firstChar === \"@\") {\n          if (field && isNonEmptyArray(field.directives)) {\n            const directiveName = firstKey.slice(1);\n            // If the directive appears multiple times, only the first\n            // occurrence's arguments will be used. TODO Allow repetition?\n            // TODO Cache this work somehow, a la aliasMap?\n            const d = field.directives.find(\n              (d) => d.name.value === directiveName\n            );\n            // Fortunately argumentsObjectFromField works for DirectiveNode!\n            const directiveArgs = d && argumentsObjectFromField(d, variables);\n            // For directives without arguments (d defined, but directiveArgs ===\n            // null), the presence or absence of the directive still counts as\n            // part of the field key, so we return null in those cases. If no\n            // directive with this name was found for this field (d undefined and\n            // thus directiveArgs undefined), we return undefined, which causes\n            // this value to be omitted from the key object returned by\n            // collectSpecifierPaths.\n            return (\n              directiveArgs &&\n              extractKeyPath(\n                directiveArgs,\n                // If keyPath.length === 1, this code calls extractKeyPath with an\n                // empty path, which works because it uses directiveArgs as the\n                // extracted value.\n                keyPath.slice(1)\n              )\n            );\n          }\n          // If the key started with @ but there was no corresponding directive,\n          // we want to omit this value from the key object, not fall through to\n          // treating @whatever as a normal argument name.\n          return;\n        }\n\n        if (firstChar === \"$\") {\n          const variableName = firstKey.slice(1);\n          if (variables && hasOwn.call(variables, variableName)) {\n            const varKeyPath = keyPath.slice(0);\n            varKeyPath[0] = variableName;\n            return extractKeyPath(variables, varKeyPath);\n          }\n          // If the key started with $ but there was no corresponding variable, we\n          // want to omit this value from the key object, not fall through to\n          // treating $whatever as a normal argument name.\n          return;\n        }\n\n        if (args) {\n          return extractKeyPath(args, keyPath);\n        }\n      });\n\n      const suffix = JSON.stringify(collected);\n\n      // If no arguments were passed to this field, and it didn't have any other\n      // field key contributions from directives or variables, hide the empty\n      // :{} suffix from the field key. However, a field passed no arguments can\n      // still end up with a non-empty :{...} suffix if its key configuration\n      // refers to directives or variables.\n      if (args || suffix !== \"{}\") {\n        fieldName += \":\" + suffix;\n      }\n\n      return fieldName;\n    })\n  );\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = (info.paths = []);\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach((p) => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<TObj extends Record<string, any>, TKey extends string>(\n  object: TObj,\n  key: TKey\n): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(\n    path.reduce(function reducer(obj, key): any {\n      return isArray(obj) ?\n          obj.map((child) => reducer(child, key))\n        : obj && extract!(obj, key);\n    }, object)\n  );\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), (path) =>\n      extractKeyPath(value, path)\n    ) as T;\n  }\n  return value;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAAkC;AAE5D,SACEC,wBAAwB,EACxBC,UAAU,EACVC,eAAe,EACfC,eAAe,QACV,0BAA0B;AAEjC,SAASC,MAAM,EAAEC,OAAO,QAAQ,cAAc;AAO9C;AACA,IAAMC,kBAAkB,GAOpBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAEvB,SAASC,mBAAmBA,CAACC,IAAkB;EAC7C;EACA;EACA;EACA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;EACrC,OACEJ,kBAAkB,CAACK,QAAQ,CAAC,KAC3BL,kBAAkB,CAACK,QAAQ,CAAC,GAAGJ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;AAExD;AAEA,OAAM,SAAUM,wBAAwBA,CACtCC,SAAuB;EAEvB,IAAMC,IAAI,GAAGP,mBAAmB,CAACM,SAAS,CAAC;EAE3C,OACEC,IAAI,CAACC,WAAW,KAAAD,IAAA,CAAAC,WAAA,aAAAC,MAAA,EAAAC,OAAA;IACf,IAAKC,OAAA,GAAW,SAAAA,CAAGC,IAAC,EAAAC,GAAM,EAAE;MACrB,OAAOH,OAAsB,CAAAI,SAAK,CAAAD,GAAE,EAAGD,IAAA;;IAC3C,IAA6BG,SAAA,GAAAL,OAAA,CAAAK,SAAA,GAAAC,qBAAA,CAAAV,SAAA,YAAAW,aAAA;MAEzB,IAAAC,SAAa,GAAAC,cAAiB,CAAAT,OAAG,CAAAU,WAAA,EAAAH,aAC5B;MAEP;MAGE;MACA;MACAN,OAAA;MACA,IAAAO,SACA,eAGAT,MAAA,KAASC,OAAK,CAAKU,WAAC,IACpBzB,MAAM,CAAA0B,IAAK,CAAAZ,MAAO,EAACQ,aAAW;QAC9B;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAC,SAAA,GAAAC,cAAA,CAAAV,MAAA,EAAAQ,aAAyC,EAAAK,UAAA;;MAE3ChC,SAAC,CAAA4B,SAAA,gBAAAD,aAAA,CAAAM,IAAA,OAAAd,MAAA;MAED,OAAAS,SACE;;IAOJ,OACC,GAAAM,MAAA,CAAAd,OAAA,CAAAe,QAAA,OAAAD,MAAA,CAAArB,IAAA,CAAAC,SAAA,CAAAW,SAAA;;;AAKT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAW,sBAAqBA,CAAApB,SAAA;EACrB,IAAMC,IAAA,GAAAP,mBAAU,CAAAM,SACd;EAEA,OAAUC,IAAG,CAAAoB,SAAA,KAEbpB,IACE,CAAAoB,SAAK,GAAS,UAAAC,IAAA,EAAAC,EAAA;IACb,IAAKC,KAAA,GAASD,EAAG,CAAAC,KAAA;MAAAC,SAAO,GAA+BF,EAAA,CAAAE,SAAA;MAAAC,SAAA,GAAAH,EAAA,CAAAG,SAAA;QAA7BC,SAAK,GAAAjB,qBAAW,CAAAV,SAAA,EAAE,UAAS4B,OAAA;MAC9C,IAAAC,QAAY,GAAAD,OAAA;MAChB,IAAME,SAAQ,GAAGD,QAAS,CAACE,MAAC;MAC5B,IAAMD,SAAS,KAAG;QAEd,IAAAN,KAAS,IAAArC,eAAW,CAAAqC,KAAA,CAAAQ,UAAA;UAClB,IAAAC,eAAS,GAAAJ,QAAqB,CAACK,KAAA;UACjC;UACA;UACA;UACA,IAAAC,CAAA,GAAAX,KAAA,CAAAQ,UAAA,CAAAI,IAAA,WAAAD,CAAA;YAAA,OAA+CA,CAAA,CAAAE,IAAA,CAAAC,KAAA,KAAAL,eAAA;UAAA;UAC/C;UAGA,IAAAM,aAAA,GAAAJ,CAAA,IAAAlD,wBAAA,CAAAkD,CAAA,EAAAV,SAAA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,OAAAc,aAAA,IACA1B,cACE,CAAA0B,aAAa;UACb;UAEE;UACA;UACAX,OAAA,CAAAM,KAAA;;QAIN;QACA;QACA;QACA;;MAEF,IAACJ,SAAA;QAEG,IAAAU,YAAc,GAAKX,QAAC,CAAAK,KAAA;QACtB,IAAMT,SAAA,IAAYpC,MAAG,CAAA0B,IAAS,CAAAU,SAAS,EAAAe,YAAA;UACnC,IAAAC,UAAa,GAAAb,OAAW,CAACM,KAAA;UAC3BO,UAAM,MAAUD,YAAW;UAC3B,OAAA3B,cAAgB,CAAAY,SAAa,EAAAgB,UAAA;;QAE/B;QACA;QACA;QACA;;MAEF,IAACnB,IAAA;QAEG,OAAOT,cAAA,CAAAS,IAAA,EAAAM,OAAA;;;IAGb,IAAGc,MAAA,GAAA7C,IAAA,CAAAC,SAAA,CAAA6B,SAAA;IAEH;IAEA;IACA;IACA;IACA;IACA,IAAAL,IAAA,IAAAoB,MAAA;MACIhB,SAAQ,OAAM,GAAKgB,MAAM;;IAE7B,OAAChB,SAAA;;;AAKP,OAAC,SAAAhB,sBAAAV,SAAA,EAAA2C,SAAA;EAED;EAIE;EACA,IAAAC,MAAA,OAAA1D,UAAA;EACA,OAAM2D,iBAAa,CAAA7C,SAAa,EAAA8C,MAAA,WAAAnB,SAAA,EAAAoB,IAAA;IAChC,IAAOxB,EAAA;;IACL,IAAIyB,OAAO,KAAG,QAAU;MACpB;MACF;MACA,SAAAC,CAAA,GAAAF,IAAA,CAAAG,MAAA,MAAAD,CAAA,SAAAA,CAAA;QACAD,OAAU,IAAGzB,EAAI,GAAC,IAAMA,EAAA,CAAGwB,IAAI,CAAAE,CAAA,EAAI,GAAGD,OAAM,EAAAzB,EAAA;;MAE5CI,SAAC,GAAAiB,MAAA,CAAAO,KAAA,CAAAxB,SAAA,EAAAqB,OAAA;;IAEH,OAACrB,SAAA;WACD,CAAAlC,MAAO,KAAU;;AAErB,OAAC,SAAAoD,kBAAAlD,IAAA;EAED,IAAMM,IAAA,GAAAP,mBAA4B,CAAAC,IAAkB;EAClD,IAAM,CAAAM,IAAI,CAAAmD,KAAG;IAET,IAACC,OAAU,GAAGpD,IAAA,CAAAmD,KAAA;IAChB,IAAME,aAAqB,GAAK;IAChC3D,IAAM,CAAA4D,OAAA,WAA2BC,CAAA,EAAAP,CAAA;MAE7B,IAAC3D,OAAQ,CAAAkE,CAAA;QACPX,iBAAa,CAAAW,CAAA,EAAAD,OAAA,WAAAE,CAAA;UAAA,OAAAJ,OAAA,CAAAK,IAAA,CAAAJ,aAAA,CAAApC,MAAA,CAAAuC,CAAA;QAAA;QACfH,aAAA,CAAAJ,MAAoB,GAAC;aAEtB;qBAAO,CAAAQ,IAAA,CAAAF,CAAA;QACN,KAAAlE,OAAA,CAAWK,IAAC,CAAIsD,CAAC,GAAG;UAChBI,OAAC,CAAOK,IAAC,CAAIJ,aAAW,CAAApB,KAAA;UAC1BoB,aAAW,CAAAJ,MAAA;;;;;EAKnB,OAACjD,IAAA,CAAAmD,KAAA;;AAGH,SAACpC,WAAAb,MAAA,EAAAI,GAAA;EAED,OAASJ,MAAA,CAAAI,GACP;;AAIF,OAAC,SAAAM,eAAAV,MAAA,EAAA4C,IAAA,EAAA1C,OAAA;EAED;EAKE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAA,OAAA,GAAAA,OAAA,IAAAW,UAAA;EACA,OAAO2C,SAAG,CAAOZ,IAAI,CAAAD,MAAA,UAAWc,QAAAC,GAAA,EAAAtD,GAAA;IAChC,OAAOjB,OACL,CAAAuE,GAAK,IACHA,GAAO,CAAAC,GAAA,WAAcC,KAAA;MAAA,OAAAH,OAAA,CAAAG,KAAA,EAAAxD,GAAA;IAAA,KACjBsD,GAAI,IAAIxD,OAAA,CAAAwD,GAAC,EAAAtD,GAAK;WACf,CAAC;;AAGV,SAACoD,UAAArB,KAAA;EAED;EACE;EACA;EACA,IAAAlD,eAAA,CAAAkD,KAAA;IACI,IAAAhD,OAAA,CAAAgD,KAAgB;MACd,OAAOA,KAAC,CAAKwB,GAAG,CAACH,SAAA;;IAErB,OAACjD,qBAAA,CAAAlB,MAAA,CAAAwE,IAAA,CAAA1B,KAAA,EAAA2B,IAAA,cAAAlB,IAAA;MACD,OAAOlC,cAAA,CAAAyB,KAAsB,EAAAS,IAAO;;;EAGtC,OAACT,KAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}