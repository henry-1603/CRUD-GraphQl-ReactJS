{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\"refetch\", \"reobserve\", \"fetchMore\", \"updateQuery\", \"startPolling\", \"subscribeToMore\"];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery(query, options) {\n  var _a;\n  var execOptionsRef = React.useRef();\n  var optionsRef = React.useRef();\n  var queryRef = React.useRef();\n  var merged = mergeOptions(options, execOptionsRef.current || {});\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n  var internalState = useInternalState(useApolloClient(options && options.client), document);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  var eagerMethods = React.useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function (key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = React.useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = internalState.executeQuery(__assign(__assign({}, options), {\n      skip: false\n    })).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"names":["React","mergeOptions","useInternalState","useApolloClient","EAGER_METHODS","useLazyQuery","query","options","execOptionsRef","useRef","optionsRef","queryRef","merged","current","document","_a","internalState","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdateState","apply","arguments","_i","EAGER_METHODS_1","length","execute","useCallback","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}