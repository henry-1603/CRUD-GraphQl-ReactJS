{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      documentTransform = _a.documentTransform,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      _e = _a.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e,\n      defaultContext = _a.defaultContext;\n    var _this = this;\n    this.clientAwareness = {};\n    // All the queries that the QueryManager is currently managing (not\n    // including mutations and subscriptions).\n    this.queries = new Map();\n    // Maps from queryId strings to Promise rejection functions for\n    // currently active queries and fetches.\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.fetchCancelFns = new Map();\n    this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.inFlightLinkObservables = new Trie(false);\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    },\n    // Allow the apollo cache to manage its own transform caches\n    {\n      cache: false\n    });\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)\n    // The custom document transform may add new fragment spreads or new\n    // field selections, so we want to give the cache a chance to run\n    // again. For example, the InMemoryCache adds __typename to field\n    // selections and fragments from the fragment registry.\n    .concat(defaultDocumentTransform) : defaultDocumentTransform;\n    this.defaultContext = defaultContext || Object.create(null);\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(25));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            invariant(mutation, 26);\n            invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              fetchPolicy: fetchPolicy,\n              errorPolicy: errorPolicy,\n              context: context,\n              updateQueries: updateQueries,\n              update: updateWithProxyFn,\n              keepRootFields: keepRootFields\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: isOptimistic ? optimisticResponse : void 0\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: isOptimistic ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  // Since mutations might receive multiple payloads from the\n                  // ApolloLink chain (e.g. when used with @defer),\n                  // we resolve with a SingleExecutionResult or after the final\n                  // ExecutionPatchResult has arrived and we have assembled the\n                  // multipart response into a single result.\n                  if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (isOptimistic) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          // Read the current query result from the store.\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          var update = mutation.update;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n      IGNORE: IGNORE\n    }) : optimisticResponse;\n    if (data === IGNORE) {\n      return false;\n    }\n    this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n    return true;\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: \"client\",\n          remove: true\n        }, {\n          name: \"connection\"\n        }, {\n          name: \"nonreactive\"\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable[\"lastQuery\"] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    invariant(options.query, 28);\n    invariant(options.query.kind === \"Document\", 29);\n    invariant(!options.returnPartialData, 30);\n    invariant(!options.pollInterval, 31);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(newInvariantError(32));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    // begin removing data from the store\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      _b = _a.errorPolicy,\n      errorPolicy = _b === void 0 ? \"none\" : _b,\n      variables = _a.variables,\n      _c = _a.context,\n      context = _c === void 0 ? {} : _c;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n        return result;\n      });\n    };\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables,\n  // Prefer context.queryDeduplication if specified.\n  deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var _b = this.getDocumentInfo(query),\n      serverQuery = _b.serverQuery,\n      clientQuery = _b.clientQuery;\n    if (serverQuery) {\n      var _c = this,\n        inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n        link = _c.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var varJson_1 = canonicalStringify(variables);\n        var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n        observable = entry.observable;\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          observable = entry.observable = concast;\n          concast.beforeNext(function () {\n            inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      // If we interrupted this request by calling getResultsFromLink again\n      // with the same QueryInfo object, we ignore the old results.\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          // Throwing here effectively calls observer.error.\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        // Use linkDocument rather than queryInfo.document so the\n        // operation/fragments used to write the result are the same as the\n        // ones used to obtain it from the link.\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      // Avoid storing errors from older interrupted queries.\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus, query) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    if (query === void 0) {\n      query = options.query;\n    }\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (\n      // If we're in standby, postpone advancing options.fetchPolicy using\n      // applyNextFetchPolicy.\n      normalized.fetchPolicy !== \"standby\" &&\n      // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n      // this is another way to detect when nothing was done/fetched.\n      sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return sourcesWithInfo;\n    };\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff();\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (errorPolicy === \"none\" && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n    // Watched queries must opt into overwriting existing data on refetch,\n    // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n    : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */ : 2 /* CacheWriteBehavior.MERGE */;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign(__assign({}, this.defaultContext), newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"names":["invariant","newInvariantError","equal","execute","hasDirectives","isExecutionPatchIncrementalResult","isExecutionPatchResult","removeDirectivesFromDocument","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","DocumentTransform","mergeIncrementalData","ApolloError","isApolloError","graphQLResultHasProtocolErrors","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","PROTOCOL_ERRORS_SYMBOL","print","hasOwnProperty","Object","prototype","IGNORE","create","Trie","AutoCleanedWeakCache","cacheSizes","QueryManager","_a","cache","link","defaultOptions","documentTransform","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","_e","assumeImmutableResults","defaultContext","_this","queries","Map","fetchCancelFns","transformCache","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","defaultDocumentTransform","document","transformDocument","concat","mutationStore","stop","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_f","fetchPolicy","_g","errorPolicy","keepRootFields","context","mutationId","generateMutationId","transformForLink","transform","getDocumentInfo","getVariables","addExportedVariables","_h","sent","mutationStoreValue","loading","isOptimistic","markMutationOptimistic","broadcastQueries","self","Promise","resolve","reject","getObservableFromLink","__assign","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","globalThis","__DEV__","fetchQuery","options","networkStatus","fetchConcastWithInfo","concast","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","cacheEntry","hasForcedResolvers","shouldForceResolvers","hasNonreactiveDirective","clientQuery","serverQuery","name","remove","defaultVars","definitions","map","def","kind","operation","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","add","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","hasErrors","hasProtocolErrors","protocolErrors","extensions","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","printedServerQuery_1","varJson_1","entry","lookup","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","sourcesWithInfo","fetchQueryByPolicy","sources","cleanupCancelFn","reason","setTimeout","containsDataFromLink","fromLink","includedQueriesById","lastDiff","getDiff","batch","onWatchUpdated","watch","watcher","results","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/core/QueryManager.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode } from \"graphql\";\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from \"@wry/equality\";\n\nimport type { ApolloLink, FetchResult } from \"../link/core/index.js\";\nimport { execute } from \"../link/core/index.js\";\nimport {\n  defaultCacheSizes,\n  hasDirectives,\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n  removeDirectivesFromDocument,\n} from \"../utilities/index.js\";\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\n\nimport type {\n  ObservableSubscription,\n  ConcastSourcesArray,\n} from \"../utilities/index.js\";\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  DocumentTransform,\n} from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport {\n  ApolloError,\n  isApolloError,\n  graphQLResultHasProtocolErrors,\n} from \"../errors/index.js\";\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n  DefaultContext,\n} from \"./types.js\";\nimport { LocalState } from \"./LocalState.js\";\n\nimport type { QueryStoreValue } from \"./QueryInfo.js\";\nimport {\n  QueryInfo,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from \"./QueryInfo.js\";\nimport type { ApolloErrorOptions } from \"../errors/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nimport type { IgnoreModifier } from \"../cache/core/types/common.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst IGNORE: IgnoreModifier = Object.create(null);\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nimport type { DefaultOptions } from \"./ApolloClient.js\";\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n  public readonly defaultContext: Partial<DefaultContext>;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    documentTransform,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults = !!cache.assumeImmutableResults,\n    defaultContext,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    documentTransform?: DocumentTransform;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n    defaultContext?: Partial<DefaultContext>;\n  }) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform =\n      documentTransform ?\n        defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n    this.defaultContext = defaultContext || Object.create(null);\n\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<\n    FetchResult<TData>\n  > {\n    invariant(\n      mutation,\n      \"mutation option is required. You must specify your GraphQL document in the mutation option.\"\n    );\n\n    invariant(\n      fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\",\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = (await this.localState.addExportedVariables(\n        mutation,\n        variables,\n        context\n      )) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    const isOptimistic =\n      optimisticResponse &&\n      this.markMutationOptimistic<TData, TVariables, TContext, TCache>(\n        optimisticResponse,\n        {\n          mutationId,\n          document: mutation,\n          variables,\n          fetchPolicy,\n          errorPolicy,\n          context,\n          updateQueries,\n          update: updateWithProxyFn,\n          keepRootFields,\n        }\n      );\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse: isOptimistic ? optimisticResponse : void 0,\n          },\n          variables,\n          false\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<TData, TVariables, TContext, TCache>({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: isOptimistic ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        }\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (isOptimistic) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : (\n              new ApolloError({\n                networkError: err,\n              })\n            )\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (\n        isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)\n      ) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables,\n          });\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: (document && getOperationName(document)) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      (mutation.refetchQueries || \"\").length > 0 ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache) => {\n          if (!skipCache) {\n            cacheWrites.forEach((write) => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...(result as FetchResult), data: diff.result };\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache as TCache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n      }).forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\" ?\n        optimisticResponse(mutation.variables, { IGNORE })\n      : optimisticResponse;\n\n    if (data === IGNORE) {\n      return false;\n    }\n\n    this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>(\n          {\n            ...mutation,\n            result: { data },\n          },\n          cache\n        );\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n\n    return true;\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n      .promise as TODO;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new AutoCleanedWeakCache<\n    DocumentNode,\n    TransformCacheEntry\n  >(\n    cacheSizes[\"queryManager.getDocumentInfo\"] ||\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"]\n  );\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n          ],\n          document\n        ),\n        defaultVars: getDefaultValues(\n          getOperationDefinition(document)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): OperationVariables {\n    return {\n      ...this.getDocumentInfo(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<\n    T,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n    observable[\"lastQuery\"] = query;\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId()\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      \"query option is required. You must specify your GraphQL document \" +\n        \"in the query option.\"\n    );\n\n    invariant(\n      options.query.kind === \"Document\",\n      'You must wrap the query string in a \"gql\" tag.'\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      \"returnPartialData option only supported on watchQuery.\"\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      \"pollInterval option only supported on watchQuery.\"\n    );\n\n    return this.fetchQuery<TData, TVars>(queryId, {\n      ...options,\n      query: this.transform(options.query),\n    }).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.queries.forEach((queryInfo) => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(\n            typeof nameOrDoc === \"string\" ?\n              `Unknown query named \"%s\" requested in refetchQueries options.include array`\n            : `Unknown query %o requested in refetchQueries options.include array`,\n            nameOrDoc\n          );\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery, queryId) => {\n        const { fetchPolicy } = observableQuery.options;\n        observableQuery.resetLastResults();\n        if (\n          includeStandby ||\n          (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        this.getQuery(queryId).setDiff(null);\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy = \"none\",\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(query, context, variables).map((result) => {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        const hasErrors = graphQLResultHasError(result);\n        const hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          const errors: ApolloErrorOptions = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n\n        return result;\n      });\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      const observablePromise = this.localState\n        .addExportedVariables(query, variables, context)\n        .then(makeObservable);\n\n      return new Observable<FetchResult<T>>((observer) => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          (observable) => (sub = observable.subscribe(observer)),\n          observer.error\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach((info) => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Trie<{\n    observable?: Observable<FetchResult<any>>;\n  }>(false);\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>> | undefined;\n\n    const { serverQuery, clientQuery } = this.getDocumentInfo(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication,\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const printedServerQuery = print(serverQuery);\n        const varJson = canonicalStringify(variables);\n\n        const entry = inFlightLinkObservables.lookup(\n          printedServerQuery,\n          varJson\n        );\n\n        observable = entry.observable;\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>,\n          ]);\n          observable = entry.observable = concast;\n\n          concast.beforeNext(() => {\n            inFlightLinkObservables.remove(printedServerQuery, varJson);\n          });\n        }\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>,\n        ]);\n      }\n    } else {\n      observable = new Concast([Observable.of({ data: {} } as FetchResult<T>)]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, (result) => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<\n      WatchQueryOptions<TVars, TData>,\n      \"query\" | \"variables\" | \"context\" | \"fetchPolicy\" | \"errorPolicy\"\n    >\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables\n      ),\n\n      (result) => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(\n              new ApolloError({\n                graphQLErrors,\n              })\n            );\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(\n            result,\n            linkDocument,\n            options,\n            cacheWriteBehavior\n          );\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      (networkError) => {\n        const error =\n          isApolloError(networkError) ? networkError : (\n            new ApolloError({ networkError })\n          );\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      }\n    );\n  }\n\n  private fetchConcastWithInfo<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n    query = options.query\n  ): ConcastAndInfo<TData> {\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const sourcesWithInfo = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        sourcesWithInfo.sources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options\n        );\n      }\n\n      return sourcesWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, (reason) => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    let concast: Concast<ApolloQueryResult<TData>>,\n      containsDataFromLink: boolean;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(\n        this.localState\n          .addExportedVariables(\n            normalized.query,\n            normalized.variables,\n            normalized.context\n          )\n          .then(fromVariables)\n          .then((sourcesWithInfo) => sourcesWithInfo.sources)\n      );\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return {\n      concast,\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache<TStore>,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<\n      string,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloQueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    {\n      query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus\n  ): SourcesAndInfo<TData> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff();\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) =>\n        Observable.of({\n          data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          ...(diff.complete ? null : { partial: true }),\n        } as ApolloQueryResult<TData>);\n\n      if (data && this.getDocumentInfo(query).hasForcedResolvers) {\n        return this.localState\n          .runResolvers({\n            document: query,\n            remoteResult: { data },\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n          })\n          .then((resolved) => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID\n        // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n      : (\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ?\n        CacheWriteBehavior.OVERWRITE\n      : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        query,\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            sources: [resultsFromCache(diff, queryInfo.markReady())],\n          };\n        }\n\n        if (returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"standby\":\n        return { fromLink: false, sources: [] };\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...this.defaultContext,\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface FetchConcastInfo {\n  // Metadata properties that can be returned in addition to the Concast.\n  fromLink: boolean;\n}\ninterface SourcesAndInfo<TData> extends FetchConcastInfo {\n  sources: ConcastSourcesArray<ApolloQueryResult<TData>>;\n}\ninterface ConcastAndInfo<TData> extends FetchConcastInfo {\n  concast: Concast<ApolloQueryResult<TData>>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}