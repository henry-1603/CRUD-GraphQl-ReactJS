{"ast":null,"code":"import { invariant, newInvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc) {\n  invariant(doc && doc.kind === \"Document\", 74);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== \"FragmentDefinition\";\n  }).map(function (definition) {\n    if (definition.kind !== \"OperationDefinition\") {\n      throw newInvariantError(75, definition.kind);\n    }\n    return definition;\n  });\n  invariant(operations.length <= 1, 76, operations.length);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"OperationDefinition\";\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"OperationDefinition\" && !!definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"FragmentDefinition\";\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  invariant(queryDef && queryDef.operation === \"query\", 77);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  invariant(doc.kind === \"Document\", 78);\n  invariant(doc.definitions.length <= 1, 79);\n  var fragmentDef = doc.definitions[0];\n  invariant(fragmentDef.kind === \"FragmentDefinition\", 80);\n  return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n    if (definition.kind === \"OperationDefinition\") {\n      var operation = definition.operation;\n      if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n        return definition;\n      }\n    }\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition;\n    }\n  }\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n  throw newInvariantError(81);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n  return defaultValues;\n}","map":{"version":3,"names":["invariant","newInvariantError","valueToObjectRepresentation","checkDocument","doc","kind","operations","definitions","filter","d","map","definition","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","_a","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/utilities/graphql/getFromAST.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode[\"name\"]>;\n};\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  const operations = doc.definitions\n    .filter((d) => d.kind !== \"FragmentDefinition\")\n    .map((definition) => {\n      if (definition.kind !== \"OperationDefinition\") {\n        throw newInvariantError(\n          `Schema type definitions not allowed in queries. Found: \"%s\"`,\n          definition.kind\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains %s operations`,\n    operations.length\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === \"OperationDefinition\"\n  )[0];\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        (definition): definition is OperationDefinitionWithName =>\n          definition.kind === \"OperationDefinition\" && !!definition.name\n      )\n      .map((x) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === \"FragmentDefinition\"\n  );\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === \"query\",\n    \"Must contain a query definition.\"\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    \"Fragment must have exactly one definition.\"\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === \"FragmentDefinition\",\n    \"Must be a fragment definition.\"\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === \"OperationDefinition\") {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === \"query\" ||\n        operation === \"mutation\" ||\n        operation === \"subscription\"\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(\n    \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach((def) => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}