{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === \"Variable\") {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      invariant(evaledValue !== void 0, 67, directive.name.value);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function (node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  });\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === \"skip\" || value === \"include\";\n}\nexport function getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      invariant(directiveArguments && directiveArguments.length === 1, 68, directiveName);\n      var ifArgument = directiveArguments[0];\n      invariant(ifArgument.name && ifArgument.name.value === \"if\", 69, directiveName);\n      var ifValue = ifArgument.value;\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 70, directiveName);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["invariant","visit","BREAK","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","getDirectiveNames","root","names","Directive","node","push","hasAnyDirectives","hasDirectives","hasAllDirectives","all","nameSet","Set","uniqueCount","size","delete","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n} from \"graphql\";\nimport { visit, BREAK } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}