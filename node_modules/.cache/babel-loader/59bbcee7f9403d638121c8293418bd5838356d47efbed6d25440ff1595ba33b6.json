{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = React.useRef();\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  var state = stateRef.current;\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  state.forceUpdateState = React.useReducer(function (tick) {\n    return tick + 1;\n  }, 0)[1];\n  return state;\n}\nvar InternalState = /** @class */function () {\n  function InternalState(client, query, previous) {\n    var _this = this;\n    this.client = client;\n    this.query = query;\n    /**\n     * Will be overwritten by the `useSyncExternalStore` \"force update\" method\n     * whenever it is available and reset to `forceUpdateState` when it isn't.\n     */\n    this.forceUpdate = function () {\n      return _this.forceUpdateState();\n    };\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    // This cache allows the referential stability of this.result (as returned by\n    // getCurrentResult) to translate into referential stability of the resulting\n    // QueryResult object returned by toQueryResult.\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    var previousResult = previous && previous.result;\n    var previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n  /**\n   * Forces an update using local component state.\n   * As this is not batched with `useSyncExternalStore` updates,\n   * this is only used as a fallback if the `useSyncExternalStore` \"force update\"\n   * method is not registered at the moment.\n   * See https://github.com/facebook/react/issues/25191\n   *  */\n  InternalState.prototype.forceUpdateState = function () {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    globalThis.__DEV__ !== false && invariant.warn(51);\n  };\n  InternalState.prototype.executeQuery = function (options) {\n    var _this = this;\n    var _a;\n    if (options.query) {\n      Object.assign(this, {\n        query: options.query\n      });\n    }\n    this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n    return new Promise(function (resolve) {\n      var result;\n      // Subscribe to the concast independently of the ObservableQuery in case\n      // the component gets unmounted before the promise resolves. This prevents\n      // the concast from terminating early and resolving with `undefined` when\n      // there are no more subscribers for the concast.\n      concast.subscribe({\n        next: function (value) {\n          result = value;\n        },\n        error: function () {\n          resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n        },\n        complete: function () {\n          resolve(_this.toQueryResult(result));\n        }\n      });\n    });\n  };\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = React.useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(React.useCallback(function (handleStoreChange) {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n      _this.forceUpdate = handleStoreChange;\n      var onNext = function () {\n        var previousResult = _this.result;\n        // We use `getCurrentResult()` instead of the onNext argument because\n        // the values differ slightly. Specifically, loading results will have\n        // an empty object for data instead of `undefined` for some reason.\n        var result = obsQuery.getCurrentResult();\n        // Make sure we're not attempting to re-render similar results\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n        _this.setResult(result);\n      };\n      var onError = function (error) {\n        subscription.unsubscribe();\n        subscription = obsQuery.resubscribeAfterError(onNext, onError);\n        if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n          // The error is not a GraphQL error\n          throw error;\n        }\n        var previousResult = _this.result;\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n      var subscription = obsQuery.subscribe(onNext, onError);\n      // Do the \"unsubscribe\" with a short delay.\n      // This way, an existing subscription can be reused without an additional\n      // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n      // happen in very fast succession.\n      return function () {\n        setTimeout(function () {\n          return subscription.unsubscribe();\n        });\n        _this.forceUpdate = function () {\n          return _this.forceUpdateState();\n        };\n      };\n    }, [\n    // We memoize the subscribe function using useCallback and the following\n    // dependency keys, because the subscribe function reference is all that\n    // useSyncExternalStore uses internally as a dependency key for the\n    // useEffect ultimately responsible for the subscription, so we are\n    // effectively passing this dependency array to that useEffect buried\n    // inside useSyncExternalStore, as desired.\n    obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n    return this.toQueryResult(result);\n  };\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    var currentWatchQueryOptions = this.watchQueryOptions;\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === \"standby\") {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n  InternalState.prototype.getObsQueryOptions = function () {\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n  };\n  // A function to massage options before passing them to ObservableQuery.\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n    if (_a === void 0) {\n      _a = {};\n    }\n    var skip = _a.skip,\n      ssr = _a.ssr,\n      onCompleted = _a.onCompleted,\n      onError = _a.onError,\n      defaultOptions = _a.defaultOptions,\n      // The above options are useQuery-specific, so this ...otherOptions spread\n      // makes otherOptions almost a WatchQueryOptions object, except for the\n      // query property that we add below.\n      otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n        fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n        _d = watchQueryOptions.initialFetchPolicy,\n        initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: \"standby\"\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n    return watchQueryOptions;\n  };\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  InternalState.prototype.onCompleted = function (data) {};\n  InternalState.prototype.onError = function (error) {};\n  InternalState.prototype.useObservableQuery = function () {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable ||\n    // Reuse this.observable if possible (and not SSR)\n    this.client.watchQuery(this.getObsQueryOptions());\n    this.obsQueryFields = React.useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n    return obsQuery;\n  };\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult, previousResult);\n  };\n  InternalState.prototype.handleErrorOrCompleted = function (result, previousResult) {\n    var _this = this;\n    if (!result.loading) {\n      var error_1 = this.toApolloError(result);\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(function () {\n        if (error_1) {\n          _this.onError(error_1);\n        } else if (result.data && (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus && result.networkStatus === NetworkStatus.ready) {\n          _this.onCompleted(result.data);\n        }\n      }).catch(function (error) {\n        globalThis.__DEV__ !== false && invariant.warn(error);\n      });\n    }\n  };\n  InternalState.prototype.toApolloError = function (result) {\n    return isNonEmptyArray(result.errors) ? new ApolloError({\n      graphQLErrors: result.errors\n    }) : result.error;\n  };\n  InternalState.prototype.getCurrentResult = function () {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n    return this.result;\n  };\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n    var data = result.data,\n      partial = result.partial,\n      resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData\n    }));\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n    return queryResult;\n  };\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== \"cache-only\") {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n  return InternalState;\n}();","map":{"version":3,"names":["invariant","React","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","canUseWeakMap","compact","isNonEmptyArray","maybeDeepFreeze","hasOwnProperty","Object","prototype","useQuery","query","options","create","useInternalState","client","stateRef","useRef","current","InternalState","state","forceUpdateState","useReducer","tick","previous","_this","forceUpdate","ssrDisabledResult","loading","data","error","networkStatus","skipStandbyResult","ready","toQueryResultCache","WeakMap","Map","Query","previousResult","result","previousData","globalThis","__DEV__","warn","executeQuery","assign","watchQueryOptions","createWatchQueryOptions","queryHookOptions","concast","observable","reobserveAsConcast","getObsQueryOptions","_a","Promise","resolve","subscribe","next","value","toQueryResult","getCurrentResult","complete","renderPromises","useContext","useOptions","obsQuery","useObservableQuery","useCallback","handleStoreChange","onNext","setResult","onError","subscription","unsubscribe","resubscribeAfterError","call","setTimeout","disableNetworkFetches","unsafeHandlePartialRefetch","currentWatchQueryOptions","reobserve","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","push","reduce","otherOptions","__rest","variables","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","_b","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","errors","graphQLErrors","queryResult","get","partial","resultWithoutPartial","set","__assign","called","partialRefetch","keys","length"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type { ApolloContextValue } from \"../context/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  canUseWeakMap,\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return useInternalState(useApolloClient(options.client), query).useQuery(\n    options\n  );\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>\n): InternalState<TData, TVariables> {\n  const stateRef = React.useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  state.forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  /**\n   * Forces an update using local component state.\n   * As this is not batched with `useSyncExternalStore` updates,\n   * this is only used as a fallback if the `useSyncExternalStore` \"force update\"\n   * method is not registered at the moment.\n   * See https://github.com/facebook/react/issues/25191\n   *  */\n  forceUpdateState() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\n      \"Calling default no-op implementation of InternalState#forceUpdate\"\n    );\n  }\n\n  /**\n   * Will be overwritten by the `useSyncExternalStore` \"force update\" method\n   * whenever it is available and reset to `forceUpdateState` when it isn't.\n   */\n  forceUpdate = () => this.forceUpdateState();\n\n  executeQuery(\n    options: QueryHookOptions<TData, TVariables> & {\n      query?: DocumentNode;\n    }\n  ) {\n    if (options.query) {\n      Object.assign(this, { query: options.query });\n    }\n\n    this.watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    const concast = this.observable.reobserveAsConcast(\n      this.getObsQueryOptions()\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    this.previousData = this.result?.data || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n\n    return new Promise<QueryResult<TData, TVariables>>((resolve) => {\n      let result: ApolloQueryResult<TData>;\n\n      // Subscribe to the concast independently of the ObservableQuery in case\n      // the component gets unmounted before the promise resolves. This prevents\n      // the concast from terminating early and resolving with `undefined` when\n      // there are no more subscribers for the concast.\n      concast.subscribe({\n        next: (value) => {\n          result = value;\n        },\n        error: () => {\n          resolve(this.toQueryResult(this.observable.getCurrentResult()));\n        },\n        complete: () => {\n          resolve(this.toQueryResult(result));\n        },\n      });\n    });\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = React.useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      React.useCallback(\n        (handleStoreChange) => {\n          if (this.renderPromises) {\n            return () => {};\n          }\n\n          this.forceUpdate = handleStoreChange;\n\n          const onNext = () => {\n            const previousResult = this.result;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            const result = obsQuery.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (\n              previousResult &&\n              previousResult.loading === result.loading &&\n              previousResult.networkStatus === result.networkStatus &&\n              equal(previousResult.data, result.data)\n            ) {\n              return;\n            }\n\n            this.setResult(result);\n          };\n\n          const onError = (error: Error) => {\n            subscription.unsubscribe();\n            subscription = obsQuery.resubscribeAfterError(onNext, onError);\n\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n              // The error is not a GraphQL error\n              throw error;\n            }\n\n            const previousResult = this.result;\n            if (\n              !previousResult ||\n              (previousResult && previousResult.loading) ||\n              !equal(error, previousResult.error)\n            ) {\n              this.setResult({\n                data: (previousResult && previousResult.data) as TData,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              });\n            }\n          };\n\n          let subscription = obsQuery.subscribe(onNext, onError);\n\n          // Do the \"unsubscribe\" with a short delay.\n          // This way, an existing subscription can be reused without an additional\n          // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n          // happen in very fast succession.\n          return () => {\n            setTimeout(() => subscription.unsubscribe());\n            this.forceUpdate = () => this.forceUpdateState();\n          };\n        },\n        [\n          // We memoize the subscribe function using useCallback and the following\n          // dependency keys, because the subscribe function reference is all that\n          // useSyncExternalStore uses internally as a dependency key for the\n          // useEffect ultimately responsible for the subscription, so we are\n          // effectively passing this dependency array to that useEffect buried\n          // inside useSyncExternalStore, as desired.\n          obsQuery,\n          this.renderPromises,\n          this.client.disableNetworkFetches,\n        ]\n      ),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult()\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions!: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions!: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(options: QueryHookOptions<TData, TVariables>) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted =\n      options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === \"standby\"\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(\n      compact(\n        this.observable && this.observable.options,\n        this.watchQueryOptions\n      )\n    );\n\n    return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<\n    TVariables,\n    TData\n  > {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: \"standby\",\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable!: ObservableQuery<TData, TVariables>;\n  private obsQueryFields!: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = (this.observable =\n      (this.renderPromises &&\n        this.renderPromises.getSSRObservable(this.watchQueryOptions)) ||\n      this.observable || // Reuse this.observable if possible (and not SSR)\n      this.client.watchQuery(this.getObsQueryOptions()));\n\n    this.obsQueryFields = React.useMemo(\n      () => ({\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n      }),\n      [obsQuery]\n    );\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false || this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult, previousResult);\n  }\n\n  private handleErrorOrCompleted(\n    result: ApolloQueryResult<TData>,\n    previousResult?: ApolloQueryResult<TData>\n  ) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve()\n        .then(() => {\n          if (error) {\n            this.onError(error);\n          } else if (\n            result.data &&\n            previousResult?.networkStatus !== result.networkStatus &&\n            result.networkStatus === NetworkStatus.ready\n          ) {\n            this.onCompleted(result.data);\n          }\n        })\n        .catch((error) => {\n          invariant.warn(error);\n        });\n    }\n  }\n\n  private toApolloError(\n    result: ApolloQueryResult<TData>\n  ): ApolloError | undefined {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n      : result.error;\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        (this.result = this.observable.getCurrentResult())\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(\n      result,\n      (queryResult = {\n        data, // Ensure always defined, even if result.data is missing.\n        ...resultWithoutPartial,\n        ...this.obsQueryFields,\n        client: this.client,\n        observable: this.observable,\n        variables: this.observable.variables,\n        called: !this.queryHookOptions.skip,\n        previousData: this.previousData,\n      })\n    );\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== \"cache-only\"\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}