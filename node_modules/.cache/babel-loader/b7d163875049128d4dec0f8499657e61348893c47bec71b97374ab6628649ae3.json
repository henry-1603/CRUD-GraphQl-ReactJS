{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nexport function useBackgroundQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n    variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  var didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState(wrapQueryRef(queryRef)),\n    wrappedQueryRef = _b[0],\n    setWrappedQueryRef = _b[1];\n  if (unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n  }\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    var promise = queryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(wrappedQueryRef, promise);\n  }\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n    return promise;\n  }, [queryRef]);\n  return [didFetchResult.current ? wrappedQueryRef : void 0, {\n    fetchMore: fetchMore,\n    refetch: refetch\n  }];\n}","map":{"version":3,"names":["React","useApolloClient","getSuspenseCache","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","useWatchQueryOptions","canonicalStringify","useBackgroundQuery","query","options","Object","create","client","suspenseCache","watchQueryOptions","fetchPolicy","variables","_a","queryKey","didFetchResult","useRef","current","cacheKey","__spreadArray","concat","queryRef","getQueryRef","watchQuery","_b","useState","wrappedQueryRef","setWrappedQueryRef","didChangeOptions","promise","applyOptions","fetchMore","useCallback","refetch"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@apollo/src/react/hooks/useBackgroundQuery.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryReference } from \"../internal/index.js\";\nimport type { BackgroundQueryHookOptions, NoInfer } from \"../types/types.js\";\nimport { __use } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport type { SkipToken } from \"./constants.js\";\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  refetch: RefetchFunction<TData, TVariables>;\n};\n\ntype BackgroundQueryHookOptionsNoInfer<\n  TData,\n  TVariables extends OperationVariables,\n> = BackgroundQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>;\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<BackgroundQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & TOptions\n): [\n  (\n    | QueryReference<\n        TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n          TOptions[\"returnPartialData\"] extends true ?\n            DeepPartial<TData> | undefined\n          : TData | undefined\n        : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n        : TData,\n        TVariables\n      >\n    | (TOptions[\"skip\"] extends boolean ? undefined : never)\n  ),\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<DeepPartial<TData> | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<TData | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n  }\n): [\n  QueryReference<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryReference<TData, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SkipToken\n): [undefined, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n        returnPartialData: true;\n      })\n): [\n  QueryReference<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SkipToken | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryReference<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables> = Object.create(null)\n): [\n  QueryReference<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  const didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current ||= fetchPolicy !== \"standby\";\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions as WatchQueryOptions<any, any>)\n  );\n\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(\n    wrapQueryRef(queryRef)\n  );\n  if (unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n  }\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    const promise = queryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(wrappedQueryRef, promise);\n  }\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options as FetchMoreQueryOptions<any>);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  return [\n    didFetchResult.current ? wrappedQueryRef : void 0,\n    { fetchMore, refetch },\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}