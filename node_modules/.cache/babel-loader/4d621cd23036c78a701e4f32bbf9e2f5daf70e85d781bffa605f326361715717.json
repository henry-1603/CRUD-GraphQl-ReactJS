{"ast":null,"code":"function noop() {}\nconst defaultDispose = noop;\nconst _WeakRef = typeof WeakRef !== \"undefined\" ? WeakRef : function (value) {\n  return {\n    deref: () => value\n  };\n};\nconst _WeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\nconst _FinalizationRegistry = typeof FinalizationRegistry !== \"undefined\" ? FinalizationRegistry : function () {\n  return {\n    register: noop,\n    unregister: noop\n  };\n};\nconst finalizationBatchSize = 10024;\nexport class WeakCache {\n  constructor(max = Infinity, dispose = defaultDispose) {\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new _WeakMap();\n    this.newest = null;\n    this.oldest = null;\n    this.unfinalizedNodes = new Set();\n    this.finalizationScheduled = false;\n    this.size = 0;\n    this.finalize = () => {\n      const iterator = this.unfinalizedNodes.values();\n      for (let i = 0; i < finalizationBatchSize; i++) {\n        const node = iterator.next().value;\n        if (!node) break;\n        this.unfinalizedNodes.delete(node);\n        const key = node.key;\n        delete node.key;\n        node.keyRef = new _WeakRef(key);\n        this.registry.register(key, node, node);\n      }\n      if (this.unfinalizedNodes.size > 0) {\n        queueMicrotask(this.finalize);\n      } else {\n        this.finalizationScheduled = false;\n      }\n    };\n    this.registry = new _FinalizationRegistry(this.deleteNode.bind(this));\n  }\n  has(key) {\n    return this.map.has(key);\n  }\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n  getNode(key) {\n    const node = this.map.get(key);\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return node;\n  }\n  set(key, value) {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.scheduleFinalization(node);\n    this.map.set(key, node);\n    this.size++;\n    return node.value;\n  }\n  clean() {\n    while (this.oldest && this.size > this.max) {\n      this.deleteNode(this.oldest);\n    }\n  }\n  deleteNode(node) {\n    if (node === this.newest) {\n      this.newest = node.older;\n    }\n    if (node === this.oldest) {\n      this.oldest = node.newer;\n    }\n    if (node.newer) {\n      node.newer.older = node.older;\n    }\n    if (node.older) {\n      node.older.newer = node.newer;\n    }\n    this.size--;\n    const key = node.key || node.keyRef && node.keyRef.deref();\n    this.dispose(node.value, key);\n    if (!node.keyRef) {\n      this.unfinalizedNodes.delete(node);\n    } else {\n      this.registry.unregister(node);\n    }\n    if (key) this.map.delete(key);\n  }\n  delete(key) {\n    const node = this.map.get(key);\n    if (node) {\n      this.deleteNode(node);\n      return true;\n    }\n    return false;\n  }\n  scheduleFinalization(node) {\n    this.unfinalizedNodes.add(node);\n    if (!this.finalizationScheduled) {\n      this.finalizationScheduled = true;\n      queueMicrotask(this.finalize);\n    }\n  }\n}","map":{"version":3,"names":["noop","defaultDispose","_WeakRef","WeakRef","value","deref","_WeakMap","WeakMap","Map","_FinalizationRegistry","FinalizationRegistry","register","unregister","finalizationBatchSize","WeakCache","constructor","max","Infinity","dispose","map","newest","oldest","unfinalizedNodes","Set","finalizationScheduled","size","finalize","iterator","values","i","node","next","delete","key","keyRef","registry","queueMicrotask","deleteNode","bind","has","get","getNode","older","newer","set","scheduleFinalization","clean","add"],"sources":["/Users/henilsuhagiya/Desktop/Study/Bluestone/formdata/node_modules/@wry/caches/src/weak.ts"],"sourcesContent":["import type { CommonCache } from \"./common\";\n\ninterface PartialNode<K extends object, V> {\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\ninterface UnfinalizedNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef?: undefined;\n  key: K;\n}\n\ninterface FullNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef: WeakRef<K>;\n  key?: undefined;\n}\n\ntype Node<K extends object, V> = FullNode<K, V> | UnfinalizedNode<K, V>;\n\nfunction noop() {}\nconst defaultDispose = noop;\n\nconst _WeakRef =\n  typeof WeakRef !== \"undefined\"\n    ? WeakRef\n    : (function <T>(value: T) {\n        return { deref: () => value } satisfies Omit<\n          WeakRef<any>,\n          typeof Symbol.toStringTag\n        >;\n      } as any as typeof WeakRef);\nconst _WeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\nconst _FinalizationRegistry =\n  typeof FinalizationRegistry !== \"undefined\"\n    ? FinalizationRegistry\n    : (function <T>() {\n        return {\n          register: noop,\n          unregister: noop,\n        } satisfies Omit<FinalizationRegistry<T>, typeof Symbol.toStringTag>;\n      } as any as typeof FinalizationRegistry);\n\nconst finalizationBatchSize = 10024;\n\nexport class WeakCache<K extends object = any, V = any>\n  implements CommonCache<K, V>\n{\n  private map = new _WeakMap<K, Node<K, V>>();\n  private registry: FinalizationRegistry<Node<K, V>>;\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n  private unfinalizedNodes: Set<UnfinalizedNode<K, V>> = new Set();\n  private finalizationScheduled = false;\n  public size = 0;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key?: K) => void = defaultDispose\n  ) {\n    this.registry = new _FinalizationRegistry<Node<K, V>>(\n      this.deleteNode.bind(this)\n    );\n  }\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return (node.value = value);\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest,\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.scheduleFinalization(node);\n    this.map.set(key, node);\n    this.size++;\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.size > this.max) {\n      this.deleteNode(this.oldest);\n    }\n  }\n\n  private deleteNode(node: Node<K, V>) {\n    if (node === this.newest) {\n      this.newest = node.older;\n    }\n\n    if (node === this.oldest) {\n      this.oldest = node.newer;\n    }\n\n    if (node.newer) {\n      node.newer.older = node.older;\n    }\n\n    if (node.older) {\n      node.older.newer = node.newer;\n    }\n\n    this.size--;\n    const key = node.key || (node.keyRef && node.keyRef.deref());\n    this.dispose(node.value, key);\n    if (!node.keyRef) {\n      this.unfinalizedNodes.delete(node);\n    } else {\n      this.registry.unregister(node);\n    }\n    if (key) this.map.delete(key);\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      this.deleteNode(node);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  private scheduleFinalization(node: UnfinalizedNode<K, V>) {\n    this.unfinalizedNodes.add(node);\n    if (!this.finalizationScheduled) {\n      this.finalizationScheduled = true;\n      queueMicrotask(this.finalize);\n    }\n  }\n\n  private finalize = () => {\n    const iterator = this.unfinalizedNodes.values();\n    for (let i = 0; i < finalizationBatchSize; i++) {\n      const node = iterator.next().value;\n      if (!node) break;\n      this.unfinalizedNodes.delete(node);\n      const key = node.key;\n      delete (node as unknown as FullNode<K, V>).key;\n      (node as unknown as FullNode<K, V>).keyRef = new _WeakRef(key);\n      this.registry.register(key, node, node);\n    }\n    if (this.unfinalizedNodes.size > 0) {\n      queueMicrotask(this.finalize);\n    } else {\n      this.finalizationScheduled = false;\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}